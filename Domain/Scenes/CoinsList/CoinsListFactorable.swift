//
//  CoinsListFactorable.swift
//  MarketCoins
//
//  Created by Rodrigo Alves Moreira on 19/10/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import UIKit

#warning("Remove this struct or move it to a separate file")
struct AppInjector {}

extension AppInjector {
  
  struct CoinsListInjector {}
}

extension AppInjector.CoinsListInjector: CoinsListFactorable {}

protocol CoinsListFactorable: CoinsListInteractorFactorable, CoinsListPresenterFactorable, CoinsListRouterFactorable, CoinsListServicesFactorable { }

protocol CoinsListInteractorFactorable {
  typealias InteractableFactory = CoinsListPresenterFactorable & CoinsListServicesFactorable
  
  func makeInteractor(factory: InteractableFactory, viewController: CoinsListDisplayLogic?, dataSource: CoinsListModel.DataSource) -> CoinsListInteractable
}

protocol CoinsListPresenterFactorable {
  func makePresenter(viewController: CoinsListDisplayLogic?) -> CoinsListPresentationLogic
}

protocol CoinsListRouterFactorable {
  func makeRouter(viewController: UIViewController?) -> CoinsListRouting
}

extension CoinsListFactorable {
  
  func makeInteractor(factory: InteractableFactory, viewController: CoinsListDisplayLogic?, dataSource: CoinsListModel.DataSource) -> CoinsListInteractable {
    CoinsListInteractor(factory: factory, viewController: viewController, dataSource: dataSource)
  }
  
  func makePresenter(viewController: CoinsListDisplayLogic?) -> CoinsListPresentationLogic {
    CoinsListPresenter(viewController: viewController)
  }
  
  func makeRouter(viewController: UIViewController?) -> CoinsListRouting {
    CoinsListRouter(viewController: viewController)
  }
}


// MARK: - Service Factorable
protocol CoinsListServicesFactorable {
  
  //func makeXService() -> xService
}

extension CoinsListServicesFactorable {
  
  //func makeXService() -> xService {
  //   xService()
  //}
}
