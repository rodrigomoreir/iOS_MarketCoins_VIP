//
//  CoinsListInteractor.swift
//  MarketCoins
//
//  Created by Rodrigo Alves Moreira on 19/10/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import Foundation

typealias CoinsListInteractable = CoinsListBusinessLogic & CoinsListDataStore

protocol CoinsListBusinessLogic {
  
  func doRequest(_ request: CoinsListModel.Request)
}

protocol CoinsListDataStore {
  var dataSource: CoinsListModel.DataSource { get }
}

final class CoinsListInteractor: CoinsListDataStore {
  
  var dataSource: CoinsListModel.DataSource
  
  private var factory: CoinsListInteractorFactorable.InteractableFactory
  private var presenter: CoinsListPresentationLogic
  
  init(factory: CoinsListInteractorFactorable.InteractableFactory, viewController: CoinsListDisplayLogic?, dataSource: CoinsListModel.DataSource) {
    self.factory = factory
    self.dataSource = dataSource
    self.presenter = factory.makePresenter(viewController: viewController)
  }
}


// MARK: - CoinsListBusinessLogic
extension CoinsListInteractor: CoinsListBusinessLogic {
  
  func doRequest(_ request: CoinsListModel.Request) {
    DispatchQueue.global(qos: .userInitiated).async {
      
      switch request {
        
      case .doSomething(let item):
        self.doSomething(item)
      }
    }
  }
}


// MARK: - Private Zone
private extension CoinsListInteractor {
  
  func doSomething(_ item: Int) {
    
    //construct the Service right before using it
    //let serviceX = factory.makeXService()
    
    // get new data async or sync
    //let newData = serviceX.getNewData()
    
    presenter.presentResponse(.doSomething(newItem: item + 1, isItem: true))
  }
}
